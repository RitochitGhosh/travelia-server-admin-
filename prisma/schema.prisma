// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // uncomment next line if you use Prisma <5.10
    // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Store {
    id         String      @id @default(uuid())
    name       String
    userId     String
    billboards Billboard[] @relation("StoreToBillboard")
    categories Category[]  @relation("StoreToCategory")
    sizes      Size[]      @relation("StoreToSize")
    durations  Duration[]  @relation("StoreToDuration")
    packages   Package[]   @relation("StoreToPackage")
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    orders     Order[]     @relation("StoreToOrder")
}

model Billboard {
    id         String     @id @default(uuid())
    storeId    String
    store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
    label      String
    imageUrl   String
    categories Category[]
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt

    @@index([storeId])
}

model Category {
    id          String    @id @default(uuid())
    storeId     String
    store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
    billboardId String
    billboard   Billboard @relation(fields: [billboardId], references: [id])
    packages    Package[] @relation("CategoryToPackage")
    name        String
    createdAt   DateTime  @default(now())
    uodatedAt   DateTime  @updatedAt

    @@index([storeId])
    @@index([billboardId])
}

model Size {
    id        String    @id @default(uuid())
    storeId   String
    store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
    packages  Package[]
    name      String
    value     String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([storeId])
}

model Duration {
    id        String    @id @default(uuid())
    storeId   String
    store     Store     @relation("StoreToDuration", fields: [storeId], references: [id])
    packages  Package[]
    name      String
    days      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([storeId])
}

model Package {
    id         String    @id @default(uuid())
    storeId    String
    store      Store     @relation("StoreToPackage", fields: [storeId], references: [id])
    categoryId String
    category   Category  @relation("CategoryToPackage", fields: [categoryId], references: [id])
    name       String
    price      Decimal
    isFeatured Boolean   @default(false)
    isArchived Boolean   @default(false)
    sizeId     String
    size       Size      @relation(fields: [sizeId], references: [id])
    durationId String
    duration   Duration  @relation(fields: [durationId], references: [id])
    images     Image[]
    orderItems OrderItem[]
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    @@index([storeId])
    @@index([categoryId])
    @@index([sizeId])
    @@index([durationId])
}

model Image {
    id        String   @id @default(uuid())
    packageId String
    package   Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
    url       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([packageId])
}

model Order {
    id         String      @id @default(uuid())
    storeId    String
    store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
    orderItems OrderItem[]
    isPaid     Boolean     @default(false)
    phone      String      @default("")
    address    String      @default("")
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt

    @@index([storeId])
}

model OrderItem {
    id        String  @id @default(uuid())
    orderId   String
    order   Order   @relation(fields: [orderId], references: [id])
    packageId String
    package   Package @relation(fields: [packageId], references: [id])

    @@index([orderId])
    @@index([packageId])
}
